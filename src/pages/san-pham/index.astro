---
import ProductCard from "@/components/product/ProductCard.astro";
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";

export const prerender = false; // Kích hoạt SSR cho chức năng động

// Dữ liệu sản phẩm mẫu - thay thế bằng nguồn dữ liệu thực tế của bạn
const products = await getCollection('products')

// Lấy tham số URL
const url = new URL(Astro.request.url);
const searchTerm = url.searchParams.get('search') || '';
const selectedCategory = url.searchParams.get('category') || 'Tất cả';
const selectedBrand = url.searchParams.get('brand') || 'Tất cả';
const showInStockOnly = url.searchParams.get('inStock') === 'true';
const sortBy = url.searchParams.get('sort') || 'name';
const currentPage = parseInt(url.searchParams.get('page') || '1');
const itemsPerPage = 6;

// Lấy danh sách danh mục và thương hiệu duy nhất
const categories = ['Tất cả', ...new Set(products.map(p => p.data.category))];
const brands = ['Tất cả', ...new Set(products.map(p => p.data.brand))];

// Lọc sản phẩm
let filteredProducts = products.filter(product => {
  const matchesSearch = product.data.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                       product.data.brand.toLowerCase().includes(searchTerm.toLowerCase());
  const matchesCategory = selectedCategory === 'Tất cả' || product.data.category === selectedCategory;
  const matchesBrand = selectedBrand === 'Tất cả' || product.data.brand === selectedBrand;

  return matchesSearch && matchesCategory;
});

// Sắp xếp sản phẩm
filteredProducts.sort((a, b) => {
  switch (sortBy) {
    case 'price-low':
      return a.data.price - b.data.price;
    case 'price-high':
      return b.data.price - a.data.price;
    case 'name':
    default:
      return a.data.title.localeCompare(b.data.title);
  }
});

// Phân trang
const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const paginatedProducts = filteredProducts.slice(startIndex, startIndex + itemsPerPage);

// Tạo URL phân trang
function createPageUrl(page: number) {
  const params = new URLSearchParams();
  if (searchTerm) params.set('search', searchTerm);
  if (selectedCategory !== 'Tất cả') params.set('category', selectedCategory);
  if (selectedBrand !== 'Tất cả') params.set('brand', selectedBrand);
  if (showInStockOnly) params.set('inStock', 'true');
  if (sortBy !== 'name') params.set('sort', sortBy);
  if (page !== 1) params.set('page', page.toString());
  
  return `/products${params.toString() ? '?' + params.toString() : ''}`;
}
---

<Layout>
    <div class="container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Linh kiện máy tính</h1>
        <p class="text-gray-600">Tìm kiếm linh kiện phù hợp cho bộ máy của bạn</p>
      </div>
  
      <div class="grid lg:grid-cols-4 gap-8">
        <!-- Thanh lọc -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm border p-6">
            <div class="flex items-center mb-4">
              <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
              <h3 class="font-semibold">Bộ lọc</h3>
            </div>
  
            <form id="filterForm" class="space-y-6">
              <!-- Tìm kiếm -->
              <div>
                <label class="text-sm font-medium mb-2 block">Tìm kiếm</label>
                <div class="relative">
                  <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                  <input
                    name="search"
                    type="text"
                    placeholder="Tìm kiếm sản phẩm..."
                    value={searchTerm}
                    class="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                </div>
              </div>
  
              <!-- Danh mục -->
              <div>
                <label class="text-sm font-medium mb-2 block">Danh mục</label>
                <select name="category" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                  {categories.map(category => (
                    <option value={category} selected={category === selectedCategory}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
  
              <!-- Thương hiệu -->
              <div>
                <label class="text-sm font-medium mb-2 block">Thương hiệu</label>
                <select name="brand" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                  {brands.map(brand => (
                    <option value={brand} selected={brand === selectedBrand}>
                      {brand}
                    </option>
                  ))}
                </select>
              </div>
  
              <!-- Chỉ còn hàng -->
              <div class="flex items-center space-x-2">
                <input 
                  type="checkbox" 
                  id="inStock" 
                  name="inStock"
                  value="true"
                  checked={showInStockOnly}
                  class="rounded border-gray-300 text-primary focus:ring-green-500"
                />
                <label for="inStock" class="text-sm font-medium">
                  Chỉ hiển thị còn hàng
                </label>
              </div>
  
              <button type="button" id="clearFilters" class="w-full px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                Xóa bộ lọc
              </button>
            </form>
          </div>
        </div>
  
        <!-- Lưới sản phẩm -->
        <div class="lg:col-span-3">
          <!-- Sắp xếp và kết quả -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
            <p class="text-gray-600">
              Hiển thị {paginatedProducts.length} trên tổng {filteredProducts.length} sản phẩm
            </p>
            
            <div class="flex items-center gap-4">
              <select id="sortSelect" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <option value="name" selected={sortBy === 'name'}>Sắp xếp theo tên</option>
                <option value="price-low" selected={sortBy === 'price-low'}>Giá: Thấp đến cao</option>
                <option value="price-high" selected={sortBy === 'price-high'}>Giá: Cao đến thấp</option>
                <option value="rating" selected={sortBy === 'rating'}>Đánh giá cao nhất</option>
              </select>
            </div>
          </div>
  
          <!-- Lưới sản phẩm -->
          <div class="grid grid-cols-2 md:grid-cols-4 xl:grid-cols-4 gap-6 mb-8">
            {paginatedProducts.map(product => (
             <ProductCard product={product}/>
            ))}
          </div>
  
          <!-- Không có kết quả -->
          {paginatedProducts.length === 0 && (
            <div class="text-center py-12">
              <p class="text-gray-600 text-lg">Không tìm thấy sản phẩm phù hợp với tiêu chí của bạn.</p>
              <button
                id="clearAllFilters"
                class="mt-4 px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
              >
                Xóa bộ lọc
              </button>
            </div>
          )}
  
          <!-- Phân trang -->
          {totalPages > 1 && (
            <div class="flex justify-center items-center space-x-2 mt-8">
              {currentPage > 1 && (
                <a
                  href={createPageUrl(currentPage - 1)}
                  class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  Trước
                </a>
              )}
              
              {Array.from({length: totalPages}, (_, i) => i + 1).map(page => (
                <a
                  href={createPageUrl(page)}
                  class={`px-3 py-2 rounded-md transition-colors ${
                    page === currentPage
                      ? 'bg-primary text-white'
                      : 'border border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  {page}
                </a>
              ))}
              
              {currentPage < totalPages && (
                <a
                  href={createPageUrl(currentPage + 1)}
                  class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  Tiếp
                </a>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
</Layout>