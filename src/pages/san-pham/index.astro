---
import ProductCard from "@/components/product/ProductCard.astro";
import Layout from "@/layouts/Layout.astro";

// src/pages/products.astro
export const prerender = false; // Enable SSR for dynamic functionality

// Sample product data - replace with your actual data source
const products = [
  {
    id: 1,
    name: "Intel Core i7-13700K",
    brand: "Intel",
    category: "CPU",
    price: 409,
    originalPrice: 449,
    rating: 4.8,
    reviews: 156,
    inStock: true,
    image: "/placeholder.svg",
    specs: ["16 cores", "3.4 GHz base", "5.4 GHz boost", "LGA1700"]
  },
  {
    id: 2,
    name: "AMD Ryzen 7 7800X3D",
    brand: "AMD",
    category: "CPU",
    price: 449,
    originalPrice: null,
    rating: 4.9,
    reviews: 203,
    inStock: true,
    image: "/placeholder.svg",
    specs: ["8 cores", "4.2 GHz base", "5.0 GHz boost", "AM5"]
  },
  {
    id: 3,
    name: "NVIDIA RTX 4080",
    brand: "NVIDIA",
    category: "GPU",
    price: 1199,
    originalPrice: 1299,
    rating: 4.7,
    reviews: 89,
    inStock: false,
    image: "/placeholder.svg",
    specs: ["16GB GDDR6X", "DLSS 3", "Ray Tracing", "PCIe 4.0"]
  },
  {
    id: 4,
    name: "Corsair Vengeance LPX 32GB",
    brand: "Corsair",
    category: "RAM",
    price: 129,
    originalPrice: null,
    rating: 4.6,
    reviews: 312,
    inStock: true,
    image: "/placeholder.svg",
    specs: ["DDR4-3200", "32GB Kit", "CL16", "Low Profile"]
  },
  {
    id: 5,
    name: "Samsung 980 PRO 2TB",
    brand: "Samsung",
    category: "Storage",
    price: 199,
    originalPrice: 249,
    rating: 4.8,
    reviews: 445,
    inStock: true,
    image: "/placeholder.svg",
    specs: ["NVMe SSD", "7000 MB/s", "2TB Capacity", "M.2 2280"]
  },
  {
    id: 6,
    name: "ASUS ROG Strix B650-E",
    brand: "ASUS",
    category: "Motherboard",
    price: 299,
    originalPrice: null,
    rating: 4.5,
    reviews: 78,
    inStock: true,
    image: "/placeholder.svg",
    specs: ["AM5 Socket", "Wi-Fi 6E", "DDR5", "PCIe 5.0"]
  }
];

// Get URL parameters
const url = new URL(Astro.request.url);
const searchTerm = url.searchParams.get('search') || '';
const selectedCategory = url.searchParams.get('category') || 'All';
const selectedBrand = url.searchParams.get('brand') || 'All';
const showInStockOnly = url.searchParams.get('inStock') === 'true';
const sortBy = url.searchParams.get('sort') || 'name';
const currentPage = parseInt(url.searchParams.get('page') || '1');
const itemsPerPage = 6;

// Extract unique categories and brands
const categories = ['All', ...new Set(products.map(p => p.category))];
const brands = ['All', ...new Set(products.map(p => p.brand))];

// Filter products
let filteredProducts = products.filter(product => {
  const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                       product.brand.toLowerCase().includes(searchTerm.toLowerCase());
  const matchesCategory = selectedCategory === 'All' || product.category === selectedCategory;
  const matchesBrand = selectedBrand === 'All' || product.brand === selectedBrand;
  const matchesStock = !showInStockOnly || product.inStock;
  
  return matchesSearch && matchesCategory && matchesBrand && matchesStock;
});

// Sort products
filteredProducts.sort((a, b) => {
  switch (sortBy) {
    case 'price-low':
      return a.price - b.price;
    case 'price-high':
      return b.price - a.price;
    case 'rating':
      return b.rating - a.rating;
    case 'name':
    default:
      return a.name.localeCompare(b.name);
  }
});

// Pagination
const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const paginatedProducts = filteredProducts.slice(startIndex, startIndex + itemsPerPage);

// Generate pagination URLs
function createPageUrl(page: number) {
  const params = new URLSearchParams();
  if (searchTerm) params.set('search', searchTerm);
  if (selectedCategory !== 'All') params.set('category', selectedCategory);
  if (selectedBrand !== 'All') params.set('brand', selectedBrand);
  if (showInStockOnly) params.set('inStock', 'true');
  if (sortBy !== 'name') params.set('sort', sortBy);
  if (page !== 1) params.set('page', page.toString());
  
  return `/products${params.toString() ? '?' + params.toString() : ''}`;
}
---

<Layout>
    <div class="container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Computer Components</h1>
        <p class="text-gray-600">Find the perfect components for your build</p>
      </div>
  
      <div class="grid lg:grid-cols-4 gap-8">
        <!-- Filters Sidebar -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm border p-6">
            <div class="flex items-center mb-4">
              <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
              <h3 class="font-semibold">Filters</h3>
            </div>
  
            <form id="filterForm" class="space-y-6">
              <!-- Search -->
              <div>
                <label class="text-sm font-medium mb-2 block">Search</label>
                <div class="relative">
                  <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                  <input
                    name="search"
                    type="text"
                    placeholder="Search products..."
                    value={searchTerm}
                    class="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                </div>
              </div>
  
              <!-- Category -->
              <div>
                <label class="text-sm font-medium mb-2 block">Category</label>
                <select name="category" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                  {categories.map(category => (
                    <option value={category} selected={category === selectedCategory}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
  
              <!-- Brand -->
              <div>
                <label class="text-sm font-medium mb-2 block">Brand</label>
                <select name="brand" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                  {brands.map(brand => (
                    <option value={brand} selected={brand === selectedBrand}>
                      {brand}
                    </option>
                  ))}
                </select>
              </div>
  
              <!-- In Stock Only -->
              <div class="flex items-center space-x-2">
                <input 
                  type="checkbox" 
                  id="inStock" 
                  name="inStock"
                  value="true"
                  checked={showInStockOnly}
                  class="rounded border-gray-300 text-green-600 focus:ring-green-500"
                />
                <label for="inStock" class="text-sm font-medium">
                  In stock only
                </label>
              </div>
  
              <button type="button" id="clearFilters" class="w-full px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                Clear Filters
              </button>
            </form>
          </div>
        </div>
  
        <!-- Products Grid -->
        <div class="lg:col-span-3">
          <!-- Sort and Results -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
            <p class="text-gray-600">
              Showing {paginatedProducts.length} of {filteredProducts.length} products
            </p>
            
            <div class="flex items-center gap-4">
              <select id="sortSelect" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <option value="name" selected={sortBy === 'name'}>Sort by Name</option>
                <option value="price-low" selected={sortBy === 'price-low'}>Price: Low to High</option>
                <option value="price-high" selected={sortBy === 'price-high'}>Price: High to Low</option>
                <option value="rating" selected={sortBy === 'rating'}>Highest Rated</option>
              </select>
            </div>
          </div>
  
          <!-- Products Grid -->
          <div class="grid grid-cols-2 md:grid-cols-4 xl:grid-cols-4 gap-6 mb-8">
            {paginatedProducts.map(product => (
             <ProductCard product={product}/>
            ))}
          </div>
  
          <!-- No Results -->
          {paginatedProducts.length === 0 && (
            <div class="text-center py-12">
              <p class="text-gray-600 text-lg">No products found matching your criteria.</p>
              <button
                id="clearAllFilters"
                class="mt-4 px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
              >
                Clear Filters
              </button>
            </div>
          )}
  
          <!-- Pagination -->
          {totalPages > 1 && (
            <div class="flex justify-center items-center space-x-2 mt-8">
              {currentPage > 1 && (
                <a
                  href={createPageUrl(currentPage - 1)}
                  class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  Previous
                </a>
              )}
              
              {Array.from({length: totalPages}, (_, i) => i + 1).map(page => (
                <a
                  href={createPageUrl(page)}
                  class={`px-3 py-2 rounded-md transition-colors ${
                    page === currentPage
                      ? 'bg-green-600 text-white'
                      : 'border border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  {page}
                </a>
              ))}
              
              {currentPage < totalPages && (
                <a
                  href={createPageUrl(currentPage + 1)}
                  class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  Next
                </a>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
</Layout>